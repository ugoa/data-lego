
package commands

import scala.sys.process._

import play.api.Logger
import utils.Helper.{AppRootPath, writeToFile, currentTime}
import java.io.{ByteArrayOutputStream, PrintWriter}

/**
  * Single object that handles shell command execution process.
  */
object CommandProcessor {

  /**
    * Takes the command script, write it into local filesystem, makes it executable and runs it,
    * returns an [[Int]] indicating the exit code.
    *
    * @param cmdName Identifier of the command.
    * @param description The command type to differentiate amongst each other
    * @param cmdBody the actual command script string.
    * @return The exit code. 0 if the command runs successfully.
    */
  def run(cmdName: String, description: String, cmdBody: String): Int = {

    val cmdScript = s"$AppRootPath/tmp/commands/$description/$cmdName.$currentTime.sh"
    writeToFile(cmdScript, cmdBody)

    val makeExecuable = s"chmod +x $cmdScript"
    makeExecuable.!

    Logger.warn(s"Running $cmdScript")
    cmdScript.!
  }

  /**
    * Case class for command executation information
    * @param exitCode the return code of the command, 0 if runs successfully.
    * @param output std output/error generated by the command during executation.
    */
  case class STDOutput(exitCode: Int, output: String)

  /**
    * Takes the command script, write it into local filesystem, makes it executable and runs it,
    * returns [[STDOutput]] for more detailed information.
    *
    * @param cmdName Identifier of the command.
    * @param description The command type to differentiate amongst each other
    * @param cmdBody the actual command script string.
    * @return The [[STDOutput]] type.
    */
  def execute(cmdName: String, description: String, cmdBody: String): STDOutput = {

    val cmdScript = s"$AppRootPath/tmp/commands/$description/$cmdName.$currentTime.sh"

    var exitCode = -1
    try {
      writeToFile(cmdScript, cmdBody)

      val makeExecuable = s"chmod +x $cmdScript"
      makeExecuable.!

      Logger.warn(s"Running $cmdScript")

      val stream = new ByteArrayOutputStream
      val stdoutWriter = new PrintWriter(stream)
      val stderrWriter = new PrintWriter(stream)

      exitCode = cmdScript.!(ProcessLogger(stdoutWriter.println, stderrWriter.println))

      stdoutWriter.close()
      stderrWriter.close()

      STDOutput(exitCode, stream.toString)
    } finally {
      if (exitCode == 0) s"rm -f $cmdScript".!
    }
  }
}
